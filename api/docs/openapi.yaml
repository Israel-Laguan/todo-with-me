---
openapi: 3.0.2
info:
  title: üí™üìã‚úÖToDo With Me üèÉ‚Äç‚ôÄÔ∏èüèÉ‚Äç‚ôÇÔ∏è- API Version1
  version: 1.1.3
  description: |-
    # ToDo  With Me üôå‚õëÔ∏è
    > The new way to move, but never alone!ü§ù

    Get things done with the help of your friends! Subscribe
    to our service to never fail again on your tasks.

    Call your friends for help üÜò, and lets do that task together!ÔøΩ
  contact:
    name: Israel Laguan
    email: israellaguan@gmail.com
paths:
  /subscriptions:
    summary: Path used to manage the list of subscriptions.
    description: The REST endpoint/path used to list and create zero or more `Subscription`
      entities.  This path contains a `GET` and `POST` operation to perform the list
      and create tasks, respectively.
    get:
      tags:
      - Subscription
      parameters:
      - name: offset
        description: The number of items to skip before starting to collect the result
          set
        schema:
          type: integer
        in: query
      - name: limit
        description: The numbers of items to return
        schema:
          type: integer
        in: query
      - name: search
        description: Query to match for search on the DB
        schema:
          type: string
        in: query
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionsResponse'
          description: Successful response - returns an array of `Subscription` entities.
      operationId: getsubscriptions
      summary: List All subscriptions
      description: Gets a list of all `Subscription` entities.
    post:
      requestBody:
        description: A new `Subscription` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subscription'
        required: true
      tags:
      - Subscription
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'
          description: Successful response.
      operationId: createSubscription
      summary: Create a Subscription
      description: Creates a new instance of a `Subscription`.
  /subscriptions/{subscriptionId}:
    summary: Path used to manage a single Subscription.
    description: The REST endpoint/path used to get, update, and delete single instances
      of an `Subscription`.  This path contains `GET`, `PUT`, and `DELETE` operations
      used to perform the get, update, and delete tasks, respectively.
    get:
      tags:
      - Subscription
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'
          description: Successful response - returns a single `Subscription`.
      operationId: getSubscription
      summary: Get a Subscription
      description: Gets the details of a single instance of a `Subscription`.
    put:
      requestBody:
        description: Updated `Subscription` information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionResponse'
        required: true
      tags:
      - Subscription
      responses:
        202:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'
          description: Successful response.
      operationId: updateSubscription
      summary: Update a Subscription
      description: Updates an existing `Subscription`.
    delete:
      tags:
      - Subscription
      responses:
        204:
          description: Successful response.
      operationId: deleteSubscription
      summary: Delete a Subscription
      description: Deletes an existing `Subscription`.
    parameters:
    - name: subscriptionId
      description: A unique identifier for a `Subscription`.
      schema:
        type: string
      in: path
      required: true
  /task:
    summary: Path used to manage the list of Tasks.
    description: The REST endpoint/path used to list and create zero or more `Task`
      entities.  This path contains a `GET` and `POST` operation to perform the list
      and create tasks, respectively.
    get:
      tags:
      - Task
      parameters:
      - name: offset
        description: The number of items to skip before starting to collect the result
          set
        schema:
          type: integer
        in: query
      - name: limit
        description: The numbers of items to return
        schema:
          type: integer
        in: query
      - name: search
        description: Query to match for search on the DB
        schema:
          type: string
        in: query
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TasksResponse'
          description: Successful response - returns an array of `Task` entities.
      operationId: getTasks
      summary: List All Tasks
      description: Gets a list of all `Task` entities.
    post:
      requestBody:
        description: A new `Task` to be created.
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Task'
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
        required: true
      tags:
      - Task
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
          description: Successfully Created - returns a single `Task`.
      operationId: createTask
      summary: Create a Task
      description: Creates a new instance of a `Task`.
  /task/{taskId}:
    summary: Path used to manage a single Task.
    description: The REST endpoint/path used to get, update, and delete single instances
      of an `Task`.  This path contains `GET`, `PUT`, and `DELETE` operations used
      to perform the get, update, and delete tasks, respectively.
    get:
      tags:
      - Task
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
          description: Successful response - returns a single `Task`.
      operationId: getTask
      summary: Get a Task
      description: Gets the details of a single instance of a `Task`.
    put:
      requestBody:
        description: Updated `Task` information.
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Task'
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
        required: true
      tags:
      - Task
      responses:
        202:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
          description: Successfully Updated - returns a single `Task`.
      operationId: updateTask
      summary: Update a Task
      description: Updates an existing `Task`.
    delete:
      tags:
      - Task
      responses:
        204:
          description: Successful response.
      operationId: deleteTask
      summary: Delete a Task
      description: Deletes an existing `Task`.
    parameters:
    - name: taskId
      description: A unique identifier for a `Task`.
      schema:
        type: string
      in: path
      required: true
  /users:
    summary: Path used to manage the list of users.
    description: The REST endpoint/path used to list and create zero or more `User`
      entities.  This path contains a `GET` and `POST` operation to perform the list
      and create tasks, respectively.
    get:
      tags:
      - User
      parameters:
      - name: offset
        description: The number of items to skip before starting to collect the result
          set
        schema:
          type: integer
        in: query
      - name: limit
        description: The numbers of items to return
        schema:
          type: integer
        in: query
      - name: search
        description: Query to match for search on the DB
        schema:
          type: string
        in: query
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'
          description: Successful response - returns an array of `User` entities.
      operationId: getusers
      summary: List All users
      description: Gets a list of all `User` entities.
  /users/{userId}:
    summary: Path used to manage a single User.
    description: The REST endpoint/path used to get, update, and delete single instances
      of an `User`.  This path contains `GET`, `PUT`, and `DELETE` operations used
      to perform the get, update, and delete tasks, respectively.
    get:
      tags:
      - User
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: Successful response - returns a single `User`.
      operationId: getUser
      summary: Get a User
      description: Gets the details of a single instance of a `User`.
    put:
      requestBody:
        description: Updated `User` information.
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      tags:
      - User
      responses:
        202:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: Successful response.
      operationId: updateUser
      summary: Update a User
      description: Updates an existing `User`.
    delete:
      tags:
      - User
      responses:
        204:
          description: Successful response.
      operationId: deleteUser
      summary: Delete a User
      description: Deletes an existing `User`.
    parameters:
    - name: userId
      description: A unique identifier for a `User`.
      schema:
        type: string
      in: path
      required: true
  /users/login:
    post:
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserLogin'
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
        required: true
      tags:
      - User
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
          description: User Login Succesfully
      operationId: postuserlogin
      summary: Validate your credentials
      description: Validate your credentials
  /users/signup:
    post:
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      tags:
      - User
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignupResponse'
          description: User Sign Up Successfully
      operationId: postusersignup
      summary: Sign Up to our App
components:
  schemas:
    Subscription:
      title: Root Type for Subscription
      description: üóìüîêSubscription to premium features üõí
      type: object
      properties:
        userId:
          type: string
          example: 31316
        plan:
          type: string
          example: FREE
    SubscriptionReturn:
      title: Root Type for SubscriptionReturn
      description: ""
      type: object
      properties:
        subscriptionId:
          type: string
          example: 313464
        userId:
          type: string
          example: 513464
        plan:
          enum:
          - FREE
          - PREMIUM
          type: string
          example: FREE
        createdAt:
          type: string
          example: 2019-07-26T16:12:58.417Z
    SubscriptionResponse:
      title: Root Type for SubscriptionResponse
      description: The data to send to client
      type: object
      properties:
        success:
          type: boolean
          example: true
        msg:
          type: string
          example: Subscription Successfully retrieved
        isList:
          type: boolean
          example: false
        data:
          $ref: '#/components/schemas/SubscriptionReturn'
    SubscriptionsResponse:
      title: Root Type for SubscriptionResponse
      description: The data to send to client
      type: object
      properties:
        success:
          type: boolean
          example: true
        msg:
          type: string
          example: Subscription Successfully retrieved
        isList:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionReturn'
    Task:
      title: Root Type for Task
      description: üìã‚úÖ Tasks to be completed on the future
      type: object
      properties:
        userId:
          type: string
          example: "1331"
        friends:
          type: array
          items:
            type: object
            properties:
              userId:
                type: string
                example: 321354
              isComplete:
                type: boolean
                example: false
        isComplete:
          type: boolean
          example: false
        task:
          type: string
          example: finish the ToDo With Me App
        comment:
          type: string
          example: We are delayed.
        dueDate:
          type: string
          example: 2019-07-31T16:12:58.417Z
    TaskReturn:
      title: Root Type for TaskReturn
      description: ""
      type: object
      properties:
        TaskId:
          type: string
          example: 1312
        userId:
          type: string
          example: 235
        friends:
          type: array
          items:
            type: object
            properties:
              userId:
                type: string
                example: 3138
              isComplete:
                type: boolean
                example: false
        isComplete:
          type: boolean
          example: false
        task:
          type: string
          example: finish the ToDo With Me App
        comment:
          type: string
          example: We are delayed.
        dueDate:
          type: string
          example: 2019-07-31T16:12:58.417Z
        createdAt:
          type: string
          example: 2019-07-26T16:12:58.417Z
        updatedAt:
          type: string
          example: 2019-07-27T16:12:58.417Z
    TasksResponse:
      title: Root Type for TaskResponse
      description: The info to send to user
      type: object
      properties:
        success:
          type: boolean
          example: true
        msg:
          type: string
          example: Operation Ok
        isList:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/TaskReturn'
    TaskResponse:
      title: Root Type for TaskResponse
      description: The info to send to user
      type: object
      properties:
        success:
          type: boolean
          example: true
        msg:
          type: string
          example: Operation Ok
        isList:
          type: boolean
          example: false
        data:
          $ref: '#/components/schemas/TaskReturn'
    User:
      title: Root Type for User
      description: üë§ People using our app üì±
      type: object
      properties:
        name:
          type: string
          example: Israel Laguan
        email:
          type: string
          example: israellaguan@gmail.com
        password:
          type: string
          example: superSecretPassword
        friends:
          type: array
          items:
            type: object
            properties:
              userId:
                type: string
                example: 316854
              isComplete:
                type: boolean
                example: false
    UserLogin:
      title: Root Type for UserLogin
      description: ""
      type: object
      properties:
        email:
          type: string
          example: israellaguan@gmail.com
        password:
          type: string
          example: superSecretPassword
    UserData:
      title: Root Type for UserData
      description: ""
      type: object
      properties:
        userId:
          type: string
          example: 6131
        name:
          type: string
          example: Israel Laguan
        email:
          type: string
          example: israellaguan@gmail.com
        friends:
          type: array
          items:
            type: object
            properties:
              userId:
                type: string
                example: 161684
              name:
                type: string
                example: Steven
        createdAt:
          type: string
          example: 2019-07-25T16:12:58.417Z
        updatedAt:
          type: string
          example: 2019-07-26T16:12:58.417Z
    UserResponse:
      title: Root Type for UserResponse
      description: ""
      type: object
      properties:
        success:
          type: boolean
          example: true
        msg:
          type: string
          example: Operation Ok
        isList:
          type: boolean
          example: false
        data:
          $ref: '#/components/schemas/UserData'
    UsersResponse:
      title: Response  with list of  Users
      description: ""
      type: object
      properties:
        success:
          type: boolean
          example: true
        msg:
          type: string
          example: List of Users Successfully retrieved
        isList:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserData'
    LoginResponse:
      title: Response  of Login
      description: ""
      type: object
      properties:
        success:
          type: boolean
          example: true
        msg:
          type: string
          example: You are log in
        isList:
          type: boolean
          example: false
        data:
          $ref: '#/components/schemas/UserData'
    SignupResponse:
      title: Response of SignUp
      description: ""
      type: object
      properties:
        success:
          type: boolean
          example: true
        msg:
          type: string
          example: Youve been Signed up
        isList:
          type: boolean
          example: false
        data:
          $ref: '#/components/schemas/UserData'
tags:
- name: Subscription
  description: üóìüîêSubscription to premium features üõí
- name: Task
  description: üìã‚úÖ Tasks to be completed on the future
- name: User
  description: üë§ People using our app üì±
